{
  "instruction": "BreakerControlSystem is a function block designed to manage the operational status of multiple breakers (B10_1, B10_2, B10_12, B54, B55, B56, B57) in a power system. The block monitors the state of each breaker, allowing for open/close operations and trip events, and calculates the corresponding output values (Point_1a, Point_2a, Point_3a, Point_4a) based on breaker status. This system ensures that, under the right conditions, the breakers either remain closed or trip, and that certain calculated points are set based on the combination of open/close states.\n\n# Functionality:\n- Each breaker can either be closed or tripped, and its state is updated accordingly.\n- Points (Point_1a, Point_2a, Point_3a, Point_4a) are calculated based on the closed/open state of specific breakers and certain logical conditions.\n- The status of each breaker is updated when close or trip signals are received.\n- Outputs from the system are generated by evaluating the current breaker states using logical conditions.\n\n# Inputs:\n- `B10_1_Trip`, `B10_1_Close`: Control signals for Breaker B10_1.\n- `B10_2_Trip`, `B10_2_Close`: Control signals for Breaker B10_2.\n- `B10_12_Trip`, `B10_12_Close`: Control signals for Breaker B10_12.\n- `B54_Trip`, `B54_Close`: Control signals for Breaker B54.\n- `B55_Trip`, `B55_Close`: Control signals for Breaker B55.\n- `B56_Trip`, `B56_Close`: Control signals for Breaker B56.\n- `B57_Trip`, `B57_Close`: Control signals for Breaker B57.\n\n# Outputs:\n- `Point_1a`, `Point_2a`, `Point_3a`, `Point_4a`: Calculated based on the open/close state of the breakers.\n- Breaker open/closed states: `B10_1_Opened`, `B10_1_Closed`, `B10_2_Opened`, `B10_2_Closed`, etc.\n\n# Key Logic:\n\n1. **Breaker State Transition**:\n- For breakers B10_1, B10_2, B10_12, B54, B55, B56, B57:\n- If a breaker receives a \"close\" signal, it transitions to the closed state, which means the corresponding \"closed\" state is set to `TRUE` and the corresponding \"opened\" state is set to `FALSE`.\n- If a breaker receives a \"trip\" signal, it transitions to the opened state, which means the corresponding \"opened\" state is set to `TRUE` and the corresponding \"closed\" state is set to `FALSE`.\n- Example: If `B10_1_Close` is TRUE, set `B10_1_Closed` to TRUE and `B10_1_Opened` to FALSE. If `B10_1_Trip` is TRUE, set `B10_1_Closed` to FALSE and `B10_1_Opened` to TRUE.\n\n2. **Point Calculations**:\nEach point (`Point_1a`, `Point_2a`, `Point_3a`, `Point_4a`) is calculated based on the logical combination of specific breaker closed/open states as follows:\n\nEach point (Point_1a, Point_2a, Point_3a, Point_4a) is calculated based on the logical combination of specific breaker closed/open states as follows:\nPoint_1a Calculation:\n\nIf Breaker B54 is closed AND both B10_12 and FB_BreakerControlSystem B10_1 are closed, or B10_2 is closed, then Point_1a is set to 0.\nOtherwise, Point_1a is set to 138.\nExample: If B54_Closed = TRUE, and both B10_12_Closed = TRUE and FB_BreakerControlSystem B10_1_Closed = TRUE, or B10_2_Closed = TRUE, then Point_1a will be set to 0.\n\nPoint_2a Calculation:\n\nIf Breaker B55 is closed AND both B10_12 and FB_BreakerControlSystem B10_1 are closed, or B10_2 is closed, then Point_2a is set to 0.\nOtherwise, Point_2a is set to 138.\nExample: If B55_Closed = TRUE, and both B10_12_Closed = TRUE and FB_BreakerControlSystem B10_1_Closed = TRUE, or B10_2_Closed = TRUE, then Point_2a will be set to 0.\n\nPoint_3a Calculation:\n\nIf Breaker B56 is closed AND both B10_12 and FB_BreakerControlSystem B10_2 are closed, or B10_1 is closed, then Point_3a is set to 0.\nOtherwise, Point_3a is set to 138.\nExample: If B56_Closed = TRUE, and both B10_12_Closed = TRUE and FB_BreakerControlSystem B10_2_Closed = TRUE, or B10_1_Closed = TRUE, then Point_3a will be set to 0.\n\nPoint_4a Calculation:\n\nIf Breaker B57 is closed AND both B10_12 and FB_BreakerControlSystem B10_2 are closed, or B10_1 is closed, then Point_4a is set to 0.\nOtherwise, Point_4a is set to 138.\nExample: If B57_Closed = TRUE, and both B10_12_Closed = TRUE and FB_BreakerControlSystem B10_2_Closed = TRUE, or B10_1_Closed = TRUE, then Point_4a will be set to 0.\n\n# Assumptions:\n- Only one action (trip or close) is applied to each breaker at any given time.\n\n\nFUNCTION_BLOCK FB_BreakerControlSystem\nVAR_INPUT\nB10_1_Trip : BOOL;\nB10_1_Close : BOOL;\nB10_2_Trip : BOOL;\nB10_2_Close : BOOL;\nB10_12_Trip : BOOL;\nB10_12_Close : BOOL;\nB54_Trip : BOOL;\nB54_Close : BOOL;\nB55_Trip : BOOL;\nB55_Close : BOOL;\nB56_Trip : BOOL;\nB56_Close : BOOL;\nB57_Trip : BOOL;\nB57_Close : BOOL;\nEND_VAR\nVAR_OUTPUT\nPoint_1a : INT;\nPoint_2a : INT;\nPoint_3a : INT;\nPoint_4a : INT;\nB10_1_Opened : BOOL;\nB10_1_Closed : BOOL;\nB10_2_Opened : BOOL;\nB10_2_Closed : BOOL;\nB10_12_Opened : BOOL;\nB10_12_Closed : BOOL;\nB54_Opened : BOOL;\nB54_Closed : BOOL;\nB55_Opened : BOOL;\nB55_Closed : BOOL;\nB56_Opened : BOOL;\nB56_Closed : BOOL;\nB57_Opened : BOOL;\nB57_Closed : BOOL;\nEND_VAR\nVAR\nSEL86_OUT : INT;\nMOVE89_OUT : INT;\nSEL66_OUT : INT;\nMOVE69_OUT : INT;\nSEL96_OUT : INT;\nMOVE99_OUT : INT;\nSEL106_OUT : INT;\nMOVE109_OUT : INT;\nEND_VAR\n\n\nEND_FUNCTION_BLOCK",
  "properties_to_be_validated": [
    {
      "property_description": "Ensure that Breaker B10_1 correctly transitions to closed when it receives the close signal.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.B10_1_Close = TRUE",
          "1": "instance.B10_1_Closed = TRUE AND instance.B10_1_Opened = FALSE"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B10_1_Close = TRUE} is true at the end of the PLC cycle, then {instance.B10_1_Closed = TRUE AND instance.B10_1_Opened = FALSE} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that Breaker B10_1 correctly transitions to opened when it receives the trip signal.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.B10_1_Close = FALSE and instance.B10_1_Trip = TRUE",
          "1": "instance.B10_1_Opened = TRUE AND instance.B10_1_Closed = FALSE"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B10_1_Close = FALSE and instance.B10_1_Trip = TRUE} is true at the end of the PLC cycle, then {instance.B10_1_Opened = TRUE AND instance.B10_1_Closed = FALSE} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that Breaker B10_2 correctly transitions to closed when it receives the close signal.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.B10_2_Close = TRUE",
          "1": "instance.B10_2_Closed = TRUE AND instance.B10_2_Opened = FALSE"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B10_2_Close = TRUE} is true at the end of the PLC cycle, then {instance.B10_2_Closed = TRUE AND instance.B10_2_Opened = FALSE} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that Breaker B10_2 correctly transitions to opened when it receives the trip signal.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.B10_2_Close = FALSE and instance.B10_2_Trip = TRUE",
          "1": "instance.B10_2_Opened = TRUE AND instance.B10_2_Closed = FALSE"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B10_2_Close = FALSE and instance.B10_2_Trip = TRUE} is true at the end of the PLC cycle, then {instance.B10_2_Opened = TRUE AND instance.B10_2_Closed = FALSE} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that Breaker B10_12 correctly transitions to closed when it receives the close signal.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.B10_12_Close = TRUE",
          "1": "instance.B10_12_Closed = TRUE AND instance.B10_12_Opened = FALSE"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B10_12_Close = TRUE} is true at the end of the PLC cycle, then {instance.B10_12_Closed = TRUE AND instance.B10_12_Opened = FALSE} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that Breaker B10_12 correctly transitions to opened when it receives the trip signal.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.B10_12_Close = FALSE and instance.B10_12_Trip = TRUE",
          "1": "instance.B10_12_Opened = TRUE AND instance.B10_12_Closed = FALSE"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B10_12_Close = FALSE and instance.B10_12_Trip = TRUE} is true at the end of the PLC cycle, then {instance.B10_12_Opened = TRUE AND instance.B10_12_Closed = FALSE} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that Breaker B54 correctly transitions to closed when it receives the close signal.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.B54_Close = TRUE",
          "1": "instance.B54_Closed = TRUE AND instance.B54_Opened = FALSE"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B54_Close = TRUE} is true at the end of the PLC cycle, then {instance.B54_Closed = TRUE AND instance.B54_Opened = FALSE} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that Breaker B54 correctly transitions to opened when it receives the trip signal.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.B54_Close = FALSE and instance.B54_Trip = TRUE",
          "1": "instance.B54_Opened = TRUE AND instance.B54_Closed = FALSE"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B54_Close = FALSE and instance.B54_Trip = TRUE} is true at the end of the PLC cycle, then {instance.B54_Opened = TRUE AND instance.B54_Closed = FALSE} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that Breaker B55 correctly transitions to closed when it receives the close signal.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.B55_Close = TRUE",
          "1": "instance.B55_Closed = TRUE AND instance.B55_Opened = FALSE"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B55_Close = TRUE} is true at the end of the PLC cycle, then {instance.B55_Closed = TRUE AND instance.B55_Opened = FALSE} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that Breaker B55 correctly transitions to opened when it receives the trip signal.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.B55_Close = FALSE and instance.B55_Trip = TRUE",
          "1": "instance.B55_Opened = TRUE AND instance.B55_Closed = FALSE"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B55_Close = FALSE and instance.B55_Trip = TRUE} is true at the end of the PLC cycle, then {instance.B55_Opened = TRUE AND instance.B55_Closed = FALSE} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that Breaker B56 correctly transitions to closed when it receives the close signal.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.B56_Close = TRUE",
          "1": "instance.B56_Closed = TRUE AND instance.B56_Opened = FALSE"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B56_Close = TRUE} is true at the end of the PLC cycle, then {instance.B56_Closed = TRUE AND instance.B56_Opened = FALSE} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that Breaker B56 correctly transitions to opened when it receives the trip signal.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.B56_Close = FALSE and instance.B56_Trip = TRUE",
          "1": "instance.B56_Opened = TRUE AND instance.B56_Closed = FALSE"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B56_Close = FALSE and instance.B56_Trip = TRUE} is true at the end of the PLC cycle, then {instance.B56_Opened = TRUE AND instance.B56_Closed = FALSE} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that Breaker B57 correctly transitions to closed when it receives the close signal.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.B57_Close = TRUE",
          "1": "instance.B57_Closed = TRUE AND instance.B57_Opened = FALSE"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B57_Close = TRUE} is true at the end of the PLC cycle, then {instance.B57_Closed = TRUE AND instance.B57_Opened = FALSE} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that Breaker B57 correctly transitions to opened when it receives the trip signal.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.B57_Close = FALSE and instance.B57_Trip = TRUE",
          "1": "instance.B57_Opened = TRUE AND instance.B57_Closed = FALSE"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B57_Close = FALSE and instance.B57_Trip = TRUE} is true at the end of the PLC cycle, then {instance.B57_Opened = TRUE AND instance.B57_Closed = FALSE} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that Point_1a is correctly calculated based on the state of Breakers B54, B10_12, B10_1, and B10_2.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "(instance.B54_Closed AND (instance.B10_12_Closed AND instance.B10_1_Closed OR instance.B10_2_Closed))",
          "1": "instance.Point_1a = 0"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B54_Closed AND (instance.B10_12_Closed AND instance.B10_1_Closed OR instance.B10_2_Closed)} is true, {instance.Point_1a = 0}."
      }
    },
    {
      "property_description": "Ensure that Point_1a is correctly calculated based on the state of Breakers B54, B10_12, B10_1, and B10_2.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "NOT (instance.B54_Closed AND (instance.B10_12_Closed AND instance.B10_1_Closed OR instance.B10_2_Closed))",
          "1": "instance.Point_1a = 138"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {NOT (instance.B54_Closed AND (instance.B10_12_Closed AND instance.B10_1_Closed OR instance.B10_2_Closed))} is true, {instance.Point_1a = 138}."
      }
    },
    {
      "property_description": "Ensure that Point_2a is correctly calculated based on the state of Breakers B55, B10_12, B10_1, and B10_2.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "(instance.B55_Closed AND (instance.B10_12_Closed AND instance.B10_1_Closed OR instance.B10_2_Closed))",
          "1": "instance.Point_2a = 0"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B55_Closed AND (instance.B10_12_Closed AND instance.B10_1_Closed OR instance.B10_2_Closed)} is true, {instance.Point_2a = 0}."
      }
    },
    {
      "property_description": "Ensure that Point_2a is correctly calculated based on the state of Breakers B55, B10_12, B10_1, and B10_2.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "NOT (instance.B55_Closed AND (instance.B10_12_Closed AND instance.B10_1_Closed OR instance.B10_2_Closed))",
          "1": "instance.Point_2a = 138"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {NOT (instance.B55_Closed AND (instance.B10_12_Closed AND instance.B10_1_Closed OR instance.B10_2_Closed))} is true, {instance.Point_2a = 138}."
      }
    },
    {
      "property_description": "Ensure that Point_3a is correctly calculated based on the state of Breakers B56, B10_12, B10_1, and B10_2.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "(instance.B56_Closed AND (instance.B10_12_Closed AND instance.B10_2_Closed OR instance.B10_1_Closed))",
          "1": "instance.Point_3a = 0"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B56_Closed AND (instance.B10_12_Closed AND instance.B10_2_Closed OR instance.B10_1_Closed)} is true, {instance.Point_3a = 0}."
      }
    },
    {
      "property_description": "Ensure that Point_3a is correctly calculated based on the state of Breakers B56, B10_12, B10_1, and B10_2.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "NOT (instance.B56_Closed AND (instance.B10_12_Closed AND instance.B10_2_Closed OR instance.B10_1_Closed))",
          "1": "instance.Point_3a = 138"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {NOT (instance.B56_Closed AND (instance.B10_12_Closed AND instance.B10_2_Closed OR instance.B10_1_Closed)} is true, {instance.Point_3a = 138}."
      }
    },
    {
      "property_description": "Ensure that Point_4a is correctly calculated based on the state of Breakers B57, B10_12, B10_1, and B10_2.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "(instance.B57_Closed AND (instance.B10_12_Closed AND instance.B10_2_Closed OR instance.B10_1_Closed))",
          "1": "instance.Point_4a = 0"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {instance.B57_Closed AND (instance.B10_12_Closed AND instance.B10_2_Closed OR instance.B10_1_Closed)} is true, {instance.Point_4a = 0}."
      }
    },
    {
      "property_description": "Ensure that Point_4a is correctly calculated based on the state of Breakers B57, B10_12, B10_1, and B10_2.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "NOT (instance.B57_Closed AND (instance.B10_12_Closed AND instance.B10_2_Closed OR instance.B10_1_Closed))",
          "1": "instance.Point_4a = 138"
        },
        "entry_point": "FB_BreakerControlSystem",
        "pattern_description": "If {NOT (instance.B57_Closed AND (instance.B10_12_Closed AND instance.B10_2_Closed OR instance.B10_1_Closed)} is true, {instance.Point_4a = 138}."
      }
    }
  ],
  "id": "v2-H-1"
}
{
  "instruction": "Create a Function Block named FB_CircuitControl to manage a power distribution system with the following specifications:\n\nInputs:\n\nReset_All_CB: BOOL (Reset signal for all circuit breakers)\nCurrent_Fault_on_TRSF1: INT (Fault current on Transformer 1)\nCurrent_Fault_on_66BUS1: INT (Fault current on 66kV Bus 1)\n\n\nOutputs:\n\nShort_Circuit_TRSF1: BOOL (Short circuit detection on Transformer 1)\nShort_Circuit_66BUS: BOOL (Short circuit detection on 66kV Bus)\nOpen_CB1_66KV: BOOL (Status of Circuit Breaker 1 on 66kV side)\nOpen_CB2_66KV: BOOL (Status of Circuit Breaker 2 on 66kV side)\nOpen_CB_TRSF1: BOOL (Status of Circuit Breaker for Transformer 1)\nOpen_CB2_22KV: BOOL (Status of Circuit Breaker 2 on 22kV side)\n\n\nInternal Variables:\n\nDefine a constant Threshold500 with value 500\n\n\nLogic Implementation:\nImplement the following logic in the order specified:\na) Implement short circuit detection:\n\nSet Short_Circuit_66BUS to TRUE if Current_Fault_on_66BUS1 > Threshold500\nSet Short_Circuit_TRSF1 to TRUE if Current_Fault_on_TRSF1 > Threshold500\n\nb) Implement circuit breaker control logic in the following order:\n\nOpen_CB2_22KV:\nSet to TRUE if any of these conditions are met:\n\nReset_All_CB is FALSE, AND\nThe previous state of Open_CB2_22KV was FALSE, AND\nEither Open_CB1_66KV is TRUE and Open_CB_TRSF1 is TRUE, OR Short_Circuit_66BUS is TRUE\n\n\nOpen_CB1_66KV:\nSet to TRUE if any of these conditions are met:\n\nReset_All_CB is FALSE, AND\nOpen_CB2_22KV is FALSE, AND\nThe previous state of Open_CB1_66KV was TRUE and Open_CB_TRSF1 is TRUE, OR Short_Circuit_66BUS is TRUE\n\n\nOpen_CB_TRSF1:\nSet to TRUE if any of these conditions are met:\n\nReset_All_CB is FALSE, AND\nOpen_CB2_22KV is FALSE, AND\nOpen_CB1_66KV is TRUE and the previous state of Open_CB_TRSF1 was TRUE, OR Short_Circuit_66BUS is TRUE\n\n\nOpen_CB2_66KV:\nAlways set to TRUE\nUpdate Open_CB2_22KV again:\nSet to TRUE if any of these conditions are met:\n\nReset_All_CB is FALSE, AND\nThe previous state of Open_CB2_22KV was FALSE, AND\nOpen_CB2_66KV is TRUE and Open_CB1_66KV is TRUE and Open_CB_TRSF1 is TRUE, OR Short_Circuit_TRSF1 is TRUE\n\n\nUpdate Open_CB1_66KV again:\nSet to TRUE if any of these conditions are met:\n\nReset_All_CB is FALSE, AND\nOpen_CB2_22KV is FALSE, AND\nOpen_CB2_66KV is TRUE and the previous state of Open_CB1_66KV was TRUE and Open_CB_TRSF1 is TRUE, OR Short_Circuit_TRSF1 is TRUE\n\n\nUpdate Open_CB_TRSF1 again:\nSet to TRUE if any of these conditions are met:\n\nReset_All_CB is FALSE, AND\nOpen_CB2_22KV is FALSE, AND\nOpen_CB2_66KV is TRUE and Open_CB1_66KV is TRUE and the previous state of Open_CB_TRSF1 was TRUE, OR Short_Circuit_TRSF1 is TRUE\n\n\nAdditional Considerations:\n\nEnsure the logic prevents rapid switching of circuit breaker states\nImplement failsafe conditions to maintain system stability\nThe order of operations is crucial for the correct behavior of the system\n\nFUNCTION_BLOCK FB_CircuitControl\nVAR_INPUT\nReset_All_CB : BOOL;\nCurrent_Fault_on_TRSF1 : INT;\nCurrent_Fault_on_66BUS1 : INT;\nEND_VAR\n\nVAR_OUTPUT\nShort_Circuit_TRSF1 : BOOL;\nShort_Circuit_66BUS : BOOL;\nOpen_CB1_66KV : BOOL;\nOpen_CB2_66KV : BOOL;\nOpen_CB_TRSF1 : BOOL;\nOpen_CB2_22KV : BOOL;\nEND_VAR\n\nVAR\nCurrent_CB1_66KV : INT;\nCurrent_CB2_66KV : INT;\nCurrent_TRSF1_W1 : INT;\nCurrent_TRSF1_W2 : INT;\nCurrent_CB_TRSF1 : INT;\nCurrent_CB2_22KV : INT;\nThreshold500 : INT := 500;\nGT15_OUT : BOOL;\nGT4_OUT : BOOL;\nEND_VAR\n\nEND_FUNCTION_BLOCK",
  "properties_to_be_validated": [
    {
      "property_description": "Ensure that Short_Circuit_66BUS is set to TRUE when the fault current on 66kV Bus 1 exceeds the threshold.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-invariant",
        "pattern_params": {
          "1": "(instance.Current_Fault_on_66BUS1 > instance.Threshold500) = instance.Short_Circuit_66BUS"
        },
        "entry_point": "FB_CircuitControl",
        "pattern_description": "{(instance.Current_Fault_on_66BUS1 > instance.Threshold500) = instance.Short_Circuit_66BUS} is always true at the end of the PLC cycle."
      }
    },
    {
      "property_description": "Ensure that Short_Circuit_TRSF1 is set to TRUE when the fault current on Transformer 1 exceeds the threshold.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-invariant",
        "pattern_params": {
          "1": "(instance.Current_Fault_on_TRSF1 > instance.Threshold500) = instance.Short_Circuit_TRSF1"
        },
        "entry_point": "FB_CircuitControl",
        "pattern_description": "{(instance.Current_Fault_on_TRSF1 > instance.Threshold500) = instance.Short_Circuit_TRSF1} is always true at the end of the PLC cycle."
      }
    },
    {
      "property_description": "Ensure that CB2_66KV is always open.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-invariant",
        "pattern_params": {
          "1": "instance.Open_CB2_66KV"
        },
        "entry_point": "FB_CircuitControl",
        "pattern_description": "{instance.Open_CB2_66KV} is always true at the end of the PLC cycle."
      }
    },
    {
      "property_description": "Test case 1: Normal operation with no faults",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.Reset_All_CB = TRUE AND instance.Current_Fault_on_TRSF1 = 0 AND instance.Current_Fault_on_66BUS1 = 0 AND instance.Open_CB1_66KV = FALSE AND instance.Open_CB_TRSF1 = FALSE AND instance.Open_CB2_22KV = FALSE",
          "1": "NOT instance.Short_Circuit_TRSF1 AND NOT instance.Short_Circuit_66BUS AND instance.Open_CB2_66KV AND NOT instance.Open_CB1_66KV AND NOT instance.Open_CB_TRSF1 AND instance.Open_CB2_22KV"
        },
        "entry_point": "FB_CircuitControl",
        "pattern_description": "If all inputs are normal (no faults, all CBs closed), then no short circuits should be detected, CB2_66KV and CB2_22KV should be open, and all other CBs should be closed."
      }
    },
    {
      "property_description": "Test case 2: 66kV Bus fault",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.Reset_All_CB = FALSE AND instance.Current_Fault_on_TRSF1 = 0 AND instance.Current_Fault_on_66BUS1 = 600 AND instance.Open_CB1_66KV = TRUE AND instance.Open_CB_TRSF1 = TRUE AND instance.Open_CB2_22KV = TRUE",
          "1": "NOT instance.Short_Circuit_TRSF1 AND instance.Short_Circuit_66BUS AND instance.Open_CB2_66KV AND NOT instance.Open_CB1_66KV AND NOT instance.Open_CB_TRSF1 AND instance.Open_CB2_22KV"
        },
        "entry_point": "FB_CircuitControl",
        "pattern_description": "If there's a fault on the 66kV Bus, then Short_Circuit_66BUS should be TRUE, CB2_66KV and CB2_22KV should be open, and CB1_66KV and CB_TRSF1 should be closed."
      }
    },
    {
      "property_description": "Test case 3: Transformer 1 fault",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.Reset_All_CB = FALSE AND instance.Current_Fault_on_TRSF1 = 600 AND instance.Current_Fault_on_66BUS1 = 0 AND instance.Open_CB1_66KV = TRUE AND instance.Open_CB_TRSF1 = TRUE AND instance.Open_CB2_22KV = TRUE",
          "1": "instance.Short_Circuit_TRSF1 AND NOT instance.Short_Circuit_66BUS AND instance.Open_CB2_66KV AND instance.Open_CB1_66KV AND instance.Open_CB_TRSF1 AND NOT instance.Open_CB2_22KV"
        },
        "entry_point": "FB_CircuitControl",
        "pattern_description": "If there's a fault on Transformer 1, then Short_Circuit_TRSF1 should be TRUE, CB2_66KV, CB1_66KV, and CB_TRSF1 should be open, and CB2_22KV should be closed."
      }
    },
    {
      "property_description": "Test case 4: Reset operation after a fault",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.Reset_All_CB = TRUE AND instance.Current_Fault_on_TRSF1 = 0 AND instance.Current_Fault_on_66BUS1 = 0 AND instance.Open_CB1_66KV = TRUE AND instance.Open_CB_TRSF1 = TRUE AND instance.Open_CB2_22KV = TRUE",
          "1": "NOT instance.Short_Circuit_TRSF1 AND NOT instance.Short_Circuit_66BUS AND instance.Open_CB2_66KV AND instance.Open_CB1_66KV AND NOT instance.Open_CB_TRSF1 AND NOT instance.Open_CB2_22KV"
        },
        "entry_point": "FB_CircuitControl",
        "pattern_description": "When resetting after a fault (all CBs initially open), no short circuits should be detected, CB2_66KV and CB1_66KV should remain open, while CB_TRSF1 and CB2_22KV should be closed."
      }
    },
    {
      "property_description": "Test case 5: Boundary condition test",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.Reset_All_CB = FALSE AND instance.Current_Fault_on_TRSF1 = 500 AND instance.Current_Fault_on_66BUS1 = 500 AND instance.Open_CB1_66KV = FALSE AND instance.Open_CB_TRSF1 = FALSE AND instance.Open_CB2_22KV = FALSE",
          "1": "NOT instance.Short_Circuit_TRSF1 AND NOT instance.Short_Circuit_66BUS AND instance.Open_CB2_66KV AND NOT instance.Open_CB1_66KV AND NOT instance.Open_CB_TRSF1 AND instance.Open_CB2_22KV"
        },
        "entry_point": "FB_CircuitControl",
        "pattern_description": "At the fault current threshold, no short circuits should be detected, CB2_66KV and CB2_22KV should be open, and all other CBs should be closed."
      }
    }
  ],
  "id": "v2-H-2"
}
{
  "instruction": "The AdvancedCircuitBreakerControlFB function block manages the operational logic for a circuit breaker control system, transitioning through various states based on the input signals from buttons and the status of circuit breakers.\nLogic Overview\n\nInitialization:\nThe STABLE variable is initialized to 0. The system will loop until it reaches a stable state.\n\nState Transitions:\n\nThere is a while loop with condition (STABLE = 0), and inside the while there is state machine operations\n\n1. set stable to 1.\n\n2. The state machine progresses through a series of states (PP0, PP1, ..., PP7 and PPL3, PPL4, PPL5, PPL7)\nbased on specific conditions(a series of if conditions):\n\nPP0 to PP1:\nIf PP0 is active, and both NOT MCB_CONTROL and NOT PP1 are true, transition from PP0 to PP1, setting PP0 to 0, PP1 to 1, and STABLE to 0.\nThis indicates the first activation of the control system.\n\nPP1 to PP2:\nIf PP1 is active and S_AL1_P_B1 is true, and NOT PP2 is true, transition from PP1 to PP2, setting PP1 to 0, PP2 to 1, and STABLE to 0.\nThis indicates that the first button has been pressed.\n\nPP2 to PP3:\nIf PP2 is active, S_AL1_P_B2 is true, NOT MCB_CONTROL is true, and NOT PP3 is true, transition from PP2 to PP3, setting PP2 to 0, PP3 to 1, and STABLE to 0.\nThis indicates that the second button has been pressed without the circuit breaker being busy.\n\nPP3 to PP4:\nIf PP3 is active, S_AL1_MCB is true, and both NOT PP4 and NOT PP1 are true, transition from PP3 to PP4, setting PP3 to 0, PP4 to 1, PP1 to 1, and STABLE to 0.\nThis indicates that the main circuit breaker is closed and transitions to the next state.\n\nPP4 to PP5:\nIf PP4 and MCB are true, and MCB_BUSY is true, and NOT PP5 is true, transition from PP4 to PP5, setting PP4 to 0, MCB to 0, PP5 to 1, and STABLE to 0.\nThis indicates that the circuit breaker is busy, moving towards a stable state.\n\nPP5 to PP7:\nIf PP5 is active, S_AL1_MCB2 is true, NOT PP7 is true, and NOT MCB is true, transition from PP5 to PP7, setting PP5 to 0, PP7 to 1, MCB to 1, and STABLE to 0.\nThis indicates the control system transitions to the second circuit breaker.\n\nPP7 to End:\nIf PP7 is active and S_AL1_P_B3 is true, transition from PP7 to the end state, setting PP7 to 0 and STABLE to 0.\nThis indicates that the operation of the circuit breaker is complete.\n\nPP2 to PPL3:\nIf PP2 is active, S_AL1_P_B2 is true, MCB_CONTROL is true, NOT PPL3 is true, and NOT PP1 is true, transition from PP2 to PPL3, setting PP2 to 0, PPL3 to 1, PP1 to 1, and STABLE to 0.\nThis indicates that the second button is pressed with the main breaker being controlled, moving to an alternative state.\n\nPPL3 to PPL4:\nIf PPL3 is active, and S_AL1_MCBR is true, and NOT PPL4 is true, transition from PPL3 to PPL4, setting PPL3 to 0, PPL4 to 1, and STABLE to 0.\nThis indicates that the reverse circuit breaker (MCBR) is being activated.\n\nPPL4 to PPL5:\nIf PPL4 and MCBR are true, and MCBR_BUSY is true, and NOT PPL5 is true, transition from PPL4 to PPL5, setting PPL4 to 0, MCBR to 0, PPL5 to 1, and STABLE to 0.\nThis indicates that the reverse circuit breaker is busy and transitioning to a new state.\n\nPPL5 to PPL7:\nIf PPL5 is active, S_AL1_MCBR2 is true, NOT PPL7 is true, and NOT MCBR is true, transition from PPL5 to PPL7, setting PPL5 to 0, PPL7 to 1, MCBR to 1, and STABLE to 0.\nThis indicates that the system transitions to a second reverse circuit breaker state.\n\nPPL7 to End:\nIf PPL7 is active, and S_AL1_P_B3 is true, transition from PPL7 to the end state, setting PPL7 to 0 and STABLE to 0.\nThis indicates that the reverse circuit breaker operation is complete.\n\nOutput Control:\nAfter completing the state transitions, the outputs are set based on the active states:\nIf PP0 or PP1 is true, E_AL1_B1 is set to 1 (indicating the first circuit is active).\nIf PP3 is true, set MCB_CONTROL to 1, indicating control over the main circuit breaker.\nIf either PPL3 or PPL4 is active, set PAS_AL1_PLUS and PAS_AL1_TURN to 1, indicating operational status for these processes.\nIf either PPAL1 or PP2 is true, set PUWS_AL1_B1_PLUS to 1.\nIf PP2, PP3, or PPL3 is true, set E_AL1_B1 to 0 (indicating the circuit is not active).\nIf PP0 or PP3 is true, reset MCB_CONTROL to 0, stopping control of the main circuit breaker.\nIf PP0, PP3, or PP4 is true, reset PAS_AL1_PLUS and PAS_AL1_TURN to 0.\nIf PPAL1 or PP2 is true, reset PUWS_AL1_B1_RIGHT to 0\n\n\"output\": \"FUNCTION_BLOCK FB_AdvancedCircuitBreakerControl\\nS_AL1_P_B1 : BOOL;\\nS_AL1_P_B2 : BOOL;\\nS_AL1_MCB : BOOL;\\nMCB_BUSY : BOOL;\\nMCB_ERROR : BOOL;\\nS_AL1_MCBR : BOOL;\\nMCBR_BUSY : BOOL;\\nMCBR_ERROR : BOOL;\\nS_AL1_P_B3 : BOOL;\\nS_AL1_MCB2 : BOOL;\\nS_AL1_MCBR2 : BOOL;\\nE_AL1_B1 : BOOL;\\nPUWS_AL1_B1_PLUS : BOOL;\\nPUWS_AL1_B1_RIGHT : BOOL;\\nPAS_AL1_PLUS : BOOL;\\nPAS_AL1_TURN : BOOL;\\nEND_VAR\\n\\nVAR\\nPPAL1 : BOOL := 1;\\nPP0 : BOOL := 1;\\nPP1 : BOOL := 0;\\nPP2 : BOOL := 0;\\nPP3 : BOOL := 0;\\nPP4 : BOOL := 0;\\nMCB : BOOL := 1;\\nPP5 : BOOL := 0;\\nPP7 : BOOL := 0;\\nPPL3 : BOOL := 0;\\nPPL4 : BOOL := 0;\\nMCBR : BOOL := 1;\\nPPL5 : BOOL := 0;\\nPPL7 : BOOL := 0;\\nSTABLE : BOOL := 0;\\nEND_VAR\\n\\nVAR\\nMCB_CONTROL : BOOL;\\nEND_VAR\nEND_FUNCTION_BLOCK\"",
  "properties_to_be_validated": [
    {
      "property_description": "Ensure that if either PP0 or PP1 is true at the end of the cycle, and neither PP2, PP3, nor PPL3 is true, the output E_AL1_B1 should be set to 1.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "(instance.PP0 OR instance.PP1) AND NOT (instance.PP2 OR instance.PP3 OR instance.PPL3)",
          "1": "instance.E_AL1_B1 = 1"
        },
        "entry_point": "FB_AdvancedCircuitBreakerControl",
        "pattern_description": "If {instance.PP0 OR instance.PP1 AND NOT (instance.PP2 OR instance.PP3 OR instance.PPL3)} is true at the end of the PLC cycle, then {instance.E_AL1_B1 = 1} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that if PP2, PP3, or PPL3 is true at the end of the cycle, E_AL1_B1 should be set to 0.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "(instance.PP2 OR instance.PP3 OR instance.PPL3)",
          "1": "NOT instance.E_AL1_B1"
        },
        "entry_point": "FB_AdvancedCircuitBreakerControl",
        "pattern_description": "If {instance.PP2 OR instance.PP3 OR instance.PPL3} is true at the end of the PLC cycle, then {NOT instance.E_AL1_B1} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that if PP3 is true at the end of the cycle and neither PP0 nor PPL3 is true, MCB_CONTROL should be set to 1.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.PP3 AND NOT (instance.PP0 OR instance.PPL3)",
          "1": "instance.MCB_CONTROL = 1"
        },
        "entry_point": "FB_AdvancedCircuitBreakerControl",
        "pattern_description": "If {instance.PP3 AND NOT (instance.PP0 OR instance.PPL3)} is true at the end of the PLC cycle, then {instance.MCB_CONTROL = 1} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that if either PP0 or PPL3 is true at the end of the cycle, MCB_CONTROL should be set to 0.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "(instance.PP0 OR instance.PPL3)",
          "1": "NOT instance.MCB_CONTROL"
        },
        "entry_point": "FB_AdvancedCircuitBreakerControl",
        "pattern_description": "If {instance.PP0 OR instance.PPL3} is true at the end of the PLC cycle, then {NOT instance.MCB_CONTROL} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that if either PPL3 or PPL4 is true at the end of the cycle, and neither PP0, PP3, nor PP4 is true, PAS_AL1_PLUS and PAS_AL1_TURN should both be set to 1.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "(instance.PPL3 OR instance.PPL4) AND NOT (instance.PP0 OR instance.PP3 OR instance.PP4)",
          "1": "instance.PAS_AL1_PLUS = 1 AND instance.PAS_AL1_TURN = 1"
        },
        "entry_point": "FB_AdvancedCircuitBreakerControl",
        "pattern_description": "If {instance.PPL3 OR instance.PPL4 AND NOT (instance.PP0 OR instance.PP3 OR instance.PP4)} is true at the end of the PLC cycle, then {instance.PAS_AL1_PLUS = 1 AND instance.PAS_AL1_TURN = 1} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that if either PP0, PP3, or PP4 is true at the end of the cycle, PAS_AL1_PLUS and PAS_AL1_TURN should both be set to 0.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "(instance.PP0 OR instance.PP3 OR instance.PP4)",
          "1": "(NOT instance.PAS_AL1_PLUS) AND (NOT instance.PAS_AL1_TURN)"
        },
        "entry_point": "FB_AdvancedCircuitBreakerControl",
        "pattern_description": "If {instance.PP0 OR instance.PP3 OR instance.PP4} is true at the end of the PLC cycle, then {NOT instance.PAS_AL1_PLUS AND NOT instance.PAS_AL1_TURN} should always be true at the end of the same cycle."
      }
    },
    {
      "property_description": "Ensure that if either PPAL1 or PP2 is true at the end of the cycle, PUWS_AL1_B1_PLUS should be set to 1 and PUWS_AL1_B1_RIGHT should be set to 0.",
      "property": {
        "job_req": "pattern",
        "pattern_id": "pattern-implication",
        "pattern_params": {
          "0": "instance.PPAL1 OR instance.PP2",
          "1": "(instance.PUWS_AL1_B1_PLUS = 1) AND (NOT instance.PUWS_AL1_B1_RIGHT)"
        },
        "entry_point": "FB_AdvancedCircuitBreakerControl",
        "pattern_description": "If {instance.PPAL1 OR instance.PP2} is true at the end of the PLC cycle, then {instance.PUWS_AL1_B1_PLUS = 1 AND NOT instance.PUWS_AL1_B1_RIGHT} should always be true at the end of the same cycle."
      }
    }
  ],
  "id": "v2-H-3"
}