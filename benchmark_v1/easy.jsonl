{
    "id": "v1-E-1",
    "instruction": " Use structured text (ST code) to design a PLC function block that evaluates whether the critical motor should be triggered based on the given low pressure value compared to a threshold of 36464. The program should determine the state of Motor_Critical based on this evaluation.\n\nFUNCTION_BLOCK FB_MotorControl\nVAR_INPUT\nPressure_LOW : REAL;\nEND_VAR\n\nVAR_OUTPUT\nMotor_Critical : BOOL;\nEND_VAR\n\nVAR\nThreshold : REAL := 36464;\nEND_VAR\n\n\n\nEND_FUNCTION_BLOCK ",
    "properties_to_be_validated": [
        {
            "property_description": "Verify that all assertions are satisfied in the program.",
            "property": {
                "job_req": "assertion"
            }
        },
        {
            "property_description": "Verify that the motor is not considered critical if the pressure is above or equal to the threshold.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-implication",
                "pattern_params": {
                    "1": "instance.Pressure_LOW >= 36464",
                    "2": "instance.Motor_Critical = FALSE"
                },
                "pattern_description": "If 'instance.Pressure_LOW >= 36464' is true at the end of the PLC cycle, then 'instance.Motor_Critical = FALSE' should always be true at the end of the same cycle."
            }
        },
        {
            "property_description": "Verify that the pressure values are within safe ranges.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.Pressure_LOW >= 0 AND instance.Pressure_LOW <= 65535"
                },
                "pattern_description": "'instance.Pressure_LOW >= 0 AND instance.Pressure_LOW <= 65535' is always true at the end of the PLC cycle."
            }
        }
    ]
}
{
    "id": "v1-E-2",
    "instruction": " Use structured text (ST) to design a PLC function block named 'CALCULATE_OUTPUT'.\nThe function block receives an integer input 'i' and produces an output 'o' based on the value of 'i'.\nThe output is determined as follows: when the input 'i' is 0, the output 'o' is 0;\nwhen the input is between 1 and 5, 'o' is the square of 'i';\nwhen 'i' is between 6 and 10, 'o' is equal to 'i' plus two times 'i';\notherwise, 'o' is assigned a value of -1.\nThe program should ensure valid bounds for 'i' and that 'o' never takes undefined or invalid values.\n\nFUNCTION_BLOCK FB_CalculateOutput\nVAR_INPUT\ni: INT;\nEND_VAR\nVAR_OUTPUT\no: INT;\nEND_VAR\n\nEND_FUNCTION_BLOCK ",
    "properties_to_be_validated": [
        {
            "property_description": "Verify that all assertions are satisfied in the program.",
            "property": {
                "job_req": "assertion"
            }
        },
        {
            "property_description": "Verify that the output 'o' is calculated correctly for 'i' = 0.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.i = 0 --> instance.o = 0"
                },
                "pattern_description": "'instance.i = 0 --> instance.o = 0' is always true at the end of the PLC cycle."
            }
        },
        {
            "property_description": "Verify that the output 'o' is calculated correctly for 'i' in the range 1 to 5.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.i >= 1 AND instance.i <= 5 --> instance.o = instance.i * instance.i"
                },
                "pattern_description": "'instance.i >= 1 AND instance.i <= 5 --> instance.o = instance.i * instance.i' is always true at the end of the PLC cycle."
            }
        },
        {
            "property_description": "Verify that the output 'o' is calculated correctly for 'i' in the range 6 to 10.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.i >= 6 AND instance.i <= 10 --> instance.o = instance.i + (instance.i * 2)"
                },
                "pattern_description": "'instance.i >= 6 AND instance.i <= 10 --> instance.o = instance.i + (instance.i * 2)' is always true at the end of the PLC cycle."
            }
        },
        {
            "property_description": "Verify that the output 'o' is -1 for any other value of 'i'.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.i < 0 OR instance.i > 10 --> instance.o = -1"
                },
                "pattern_description": "'instance.i < 0 OR instance.i > 10 --> instance.o = -1' is always true at the end of the PLC cycle."
            }
        },
        {
            "property_description": "Verify that the program does not produce invalid outputs.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.o <= 32767 AND instance.o >= -32767"
                },
                "pattern_description": "'instance.o <= 32767 AND instance.o >= -32767'  is always true at the end of the PLC cycle."
            }
        }
    ]
}
{
    "id": "v1-E-3",
    "instruction": " Use structured text (ST code) to design a function block (FB) for a PLC program that involves two nested loops.\nThe outer loop (i) iterates from 0 to 10, and the inner loop (j) iterates from 10 to 100 with a step size of 2.\nDuring each iteration, if the flag is TRUE, the loop exits, and the count is updated\nto keep track of how many times the inner loop executed.\nEnsure that the count does not exceed the expected maximum of iterations\nand that loop variables stay within their defined bounds.\n\nFUNCTION_BLOCK FB_NestedLoopControl\nVAR\ni : INT;\nj : INT;\nflag : BOOL;\ncount : INT := 0;\nsome_var : INT;\nEND_VAR\n\nEND_FUNCTION_BLOCK ",
    "properties_to_be_validated": [
        {
            "property_description": "Verify that all assertions are satisfied in the program.",
            "property": {
                "job_req": "assertion"
            }
        },
        {
            "property_description": "Ensure that the count does not exceed the total number of iterations possible in the inner loop.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.count <= 46"
                },
                "pattern_description": "{1} is always true at the end of the PLC cycle."
            }
        },
        {
            "property_description": "Ensure that i does not exceed its bounds (0 to 10).",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.i >= 0 AND instance.i <= 10"
                },
                "pattern_description": "{1} is always true at the end of the PLC cycle."
            }
        },
        {
            "property_description": "Ensure that j does not exceed its bounds (10 to 100).",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.j >= 10 AND instance.j <= 100"
                },
                "pattern_description": "{1} is always true at the end of the PLC cycle."
            }
        }
    ]
}
{
    "id": "v1-E-4",
    "instruction": " Design a PLC program using structured text (ST code) that implements a function block for a loop counter.\nThe function block should include the following features:\n\n- The counter is incremented on each call, with the macro variable representing the current count\nand micro controlling the decrementing cycle.\n- The function block should return the current value of the counter through the output variable o.\n- On each invocation, if micro reaches zero, the macro variable should be incremented by 1, and micro should be reset to the new value of macro.\n- The program should manage the state of both macro and micro to ensure they do not go negative\nand that the output value o is always a positive integer.\n\nFUNCTION_BLOCK FB_LoopCounter\nVAR_INPUT\ni : BOOL;  // Trigger input for the counter\nEND_VAR\nVAR\nmacro : INT := 1;  // Current count\nmicro : INT := 1;  // Control variable for counting down\nEND_VAR\nVAR_OUTPUT\no : INT;  // Current value of the counter\nEND_VAR\n\nEND_FUNCTION_BLOCK ",
    "properties_to_be_validated": [
        {
            "property_description": "Verify that all assertions are satisfied in the program.",
            "property": {
                "job_req": "assertion"
            }
        },
        {
            "property_description": "Verify that micro does not become negative.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-forbidden",
                "pattern_params": {
                    "1": "instance.micro < 0"
                },
                "pattern_description": "{1} is impossible at the end of the PLC cycle."
            }
        },
        {
            "property_description": "Verify that macro does not become negative.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-forbidden",
                "pattern_params": {
                    "1": "instance.macro < 0"
                },
                "pattern_description": "{1} is impossible at the end of the PLC cycle."
            }
        },
        {
            "property_description": "Verify that the output o is always a positive integer.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.o > 0"
                },
                "pattern_description": "{1} is always true at the end of the PLC cycle."
            }
        }
    ]
}
{
    "id": "v1-E-5",
    "instruction": " Design a PLC function block using structured text (ST code) to process multiple emergency stop signals.\nThe function block should accept multiple emergency stop input signals\nand generate corresponding emergency stop output signals by logically inverting each input.\nEnsure that each output represents the logical NOT of its respective input,\nreflecting the emergency stop activation status.\n\nFUNCTION_BLOCK FB_Estop_Processor\nVAR_INPUT\nField_Estop_IN : BOOL;\nR1_Estop_IN : BOOL;\nR2_Estop_IN : BOOL;\nR3_Estop_IN : BOOL;\nB1_Estop_IN : BOOL;\nB2_Estop_IN : BOOL;\nB3_Estop_IN : BOOL;\nEND_VAR\nVAR_OUTPUT\nField_Estop_OUT : BOOL;\nR1_Estop_OUT : BOOL;\nR2_Estop_OUT : BOOL;\nR3_Estop_OUT : BOOL;\nB1_Estop_OUT : BOOL;\nB2_Estop_OUT : BOOL;\nB3_Estop_OUT : BOOL;\nEND_VAR\n\nEND_FUNCTION_BLOCK ",
    "properties_to_be_validated": [
            {
                "property_description": "Verify that all assertions are satisfied in the program.",
                "property": {
                    "job_req": "assertion"
                }
            },
            {
                "property_description": "Ensure that Field_Estop_OUT is always the logical NOT of Field_Estop_IN.",
                "property": {
                    "job_req": "pattern",
                    "pattern_id": "pattern-invariant",
                    "pattern_params": {
                        "1": "instance.Field_Estop_OUT = NOT instance.Field_Estop_IN"
                    },
                    "pattern_description": "{instance.Field_Estop_OUT = NOT instance.Field_Estop_IN} is always true at the end of the PLC cycle."
                }
            },
            {
                "property_description": "Ensure that R1_Estop_OUT is always the logical NOT of R1_Estop_IN.",
                "property": {
                    "job_req": "pattern",
                    "pattern_id": "pattern-invariant",
                    "pattern_params": {
                        "1": "instance.R1_Estop_OUT = NOT instance.R1_Estop_IN"
                    },
                    "pattern_description": "{instance.R1_Estop_OUT = NOT instance.R1_Estop_IN} is always true at the end of the PLC cycle."
                }
            },
            {
                "property_description": "Ensure that R2_Estop_OUT is always the logical NOT of R2_Estop_IN.",
                "property": {
                    "job_req": "pattern",
                    "pattern_id": "pattern-invariant",
                    "pattern_params": {
                        "1": "instance.R2_Estop_OUT = NOT instance.R2_Estop_IN"
                    },
                    "pattern_description": "{instance.R2_Estop_OUT = NOT instance.R2_Estop_IN} is always true at the end of the PLC cycle."
                }
            },
            {
                "property_description": "Ensure that R3_Estop_OUT is always the logical NOT of R3_Estop_IN.",
                "property": {
                    "job_req": "pattern",
                    "pattern_id": "pattern-invariant",
                    "pattern_params": {
                        "1": "instance.R3_Estop_OUT = NOT instance.R3_Estop_IN"
                    },
                    "pattern_description": "{instance.R3_Estop_OUT = NOT instance.R3_Estop_IN} is always true at the end of the PLC cycle."
                }
            },
            {
                "property_description": "Ensure that B1_Estop_OUT is always the logical NOT of B1_Estop_IN.",
                "property": {
                    "job_req": "pattern",
                    "pattern_id": "pattern-invariant",
                    "pattern_params": {
                        "1": "instance.B1_Estop_OUT = NOT instance.B1_Estop_IN"
                    },
                    "pattern_description": "{instance.B1_Estop_OUT = NOT instance.B1_Estop_IN} is always true at the end of the PLC cycle."
                }
            },
            {
                "property_description": "Ensure that B2_Estop_OUT is always the logical NOT of B2_Estop_IN.",
                "property": {
                    "job_req": "pattern",
                    "pattern_id": "pattern-invariant",
                    "pattern_params": {
                        "1": "instance.B2_Estop_OUT = NOT instance.B2_Estop_IN"
                    },
                    "pattern_description": "{instance.B2_Estop_OUT = NOT instance.B2_Estop_IN} is always true at the end of the PLC cycle."
                }
            },
            {
                "property_description": "Ensure that B3_Estop_OUT is always the logical NOT of B3_Estop_IN.",
                "property": {
                    "job_req": "pattern",
                    "pattern_id": "pattern-invariant",
                    "pattern_params": {
                        "1": "instance.B3_Estop_OUT = NOT instance.B3_Estop_IN"
                    },
                    "pattern_description": "{instance.B3_Estop_OUT = NOT instance.B3_Estop_IN} is always true at the end of the PLC cycle."
                }
            }
    ]
}
{
    "id": "v1-E-6",
    "instruction": "Design a PLC function block using structured text (ST code) to manage and increment two variables, aaa and bbb, based on their comparative values. The function block should utilize the following logic:\nIf aaa is equal to bbb, increment aaa by 1.\nIf aaa is greater than bbb, increment bbb by 1.\nIf aaa is less than bbb, increment aaa by 1.\nThe output variable, OUT, should represent the difference between aaa and bbb after executing the increments.\nAdditionally, a cycle counter, CYCLE, should increment with each function block execution to track the processing cycles.\n\nFUNCTION_BLOCK FB_ValueTracker\n    VAR_INPUT\n        aaa : DINT := 1;\n        bbb : DINT := 0;\n        CYCLE : DINT := 0;\n    END_VAR\n    VAR_OUTPUT\n        OUT : DINT;\n        UPDATED_CYCLE : DINT;\n    END_VAR\nEND_FUNCTION_BLOCK",
    "properties_to_be_validated": [
        {
            "property_description": "Ensure that the variables aaa, bbb, and OUT do not exceed the maximum value for a DINT.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.aaa <= 2147483647 AND instance.bbb <= 2147483647 AND instance.OUT <= 2147483647"
                },
                "pattern_description": "instance.aaa <= 2147483647 AND instance.bbb <= 2147483647 AND instance.OUT <= 2147483647 is always true at the end of the PLC cycle."
            }
        },
        {
            "property_description": "Ensure that UPDATED_CYCLE is always equal to CYCLE incremented by 1.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.UPDATED_CYCLE = instance.CYCLE + 1"
                },
                "pattern_description": "instance.UPDATED_CYCLE = instance.CYCLE + 1 is always true at the end of the PLC cycle."
            }
        },
        {
            "property_description": "Ensure that the output OUT is always the difference between aaa and bbb.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.OUT = instance.aaa - instance.bbb"
                },
                "pattern_description": "instance.OUT = instance.aaa - instance.bbb is always true at the end of the PLC cycle."
            }
        }
    ]
}
{
    "id": "v1-E-7",
    "instruction": " Design a PLC function block 'constantprogram' using structured text (ST code) that:\nreceives an integer input and returns two integer outputs.\nThe first output 'o' should equal the input value, while the second output 'c' should be set to a constant value of 43.\n\nFUNCTION_BLOCK constantprogram\nVAR_INPUT\ni : INT;\nEND_VAR\nVAR_OUTPUT\no : INT;\nc : INT;\nEND_VAR\nEND_FUNCTION_BLOCK ",
    "properties_to_be_validated": [
        {
            "property_description": "Verify that the output 'o' is equal to the input 'i' in the constant program.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.o = instance.i"
                },
                "pattern_description": "{1} is always true at the end of the constant program."
            }
        },
        {
            "property_description": "Verify that the output 'c' is always equal to the constant value 43.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.c = 4"
                },
                "pattern_description": "{1} is always true at the end of the constant program."
            }
        },
        {
            "property_description": "Verify that calling the constant program with input value 3 results in output 'o' being equal to 3.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-statechange-duringcycle",
                "pattern_params": {
                    "0": "instance.i = 3",
                    "1": "instance.o = 3"
                },
                "pattern_description": "If {0} is true at the beginning of the execution, then {1} should always be true at the end of the execution."
            }
        }
    ]
}
{
    "id": "v1-E-8",
    "instruction": " Design a Function Block in Structured Text (ST) named dw, which takes an integer input (i) and returns an integer output (o).\nThe function block includes an internal integer variable (ss) that increments by 1 each time the block is executed.\nIf the input i is equal to 1, the output o should be set to 1. Otherwise, o should be set to the current value of ss.\nDesign a main program (MAIN) that calls this function block with the input value 3.\nEnsure the logic of input processing, internal state management (ss),\nand output assignment is correctly implemented.\n\n\nFUNCTION_BLOCK dw\nVAR_INPUT\ni: INT;\nss: INT := 0; // Initialize ss to 0\nEND_VAR\nVAR_OUTPUT\no: INT;\nEND_VAR\n\nEND_FUNCTION_BLOCK ",
    "properties_to_be_validated": [
        {
            "property_description": "Ensure that when the input 'i' is equal to 1, the output 'o' should always be set to 1.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-implication",
                "pattern_params": {
                    "0": "instance.i = 1",
                    "1": "instance.o = 1"
                },
                "entry_point": "dw",
                "pattern_description": "If {instance.i = 1} is true at the end of the PLC cycle, then {instance.o = 1} should always be true at the end of the same cycle."
            }
        },
        {
            "property_description": "Ensure that when the input 'i' is not equal to 1, the output 'o' should always be set to the incremented value of the internal variable 'ss'.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-implication",
                "pattern_params": {
                    "0": "instance.i <> 1",
                    "1": "instance.o = instance.ss"
                },
                "entry_point": "dw",
                "pattern_description": "If {instance.i <> 1} is true at the end of the PLC cycle, then {instance.o = instance.ss} should always be true at the end of the same cycle."
            }
        },
        {
            "property_description": "Ensure that the internal variable 'ss' always increments by 1 each time the function block is executed.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-statechange-duringcycle",
                "pattern_params": {
                    "0": "instance.ss = 0",
                    "1": "instance.ss = 1"
                },
                "entry_point": "dw",
                "pattern_description": "If {instance.ss = 0} is true at the beginning of the PLC cycle, then {instance.ss = 1} is always true at the end of the same cycle."
            }
        }
    ]
}
{
    "id": "v1-E-9",
    "instruction": " Design a PLC function block named `LED_Control` using structured text (ST code).\nThe function block should contain two Boolean input variables (`PB1` and `PB2`) and one Boolean output variable (`LED`).\nImplement logical operations such that `LED` is assigned the value resulting\nfrom a logical AND operation between `PB1` and the negation of `PB2`.\nThe function block should represent a simple control system where `PB1` and `PB2` determine\nwhether `LED` is on or off based on the specified logic.\n\n\nFUNCTION_BLOCK LED_Control\nVAR_INPUT\nPB1 : BOOL;\nPB2 : BOOL;\nEND_VAR\nVAR_OUTPUT\nLED : BOOL;\nEND_VAR\n\nEND_FUNCTION_BLOCK ",
    "properties_to_be_validated": [
        {
            "property_description": "Ensure that LED is set to TRUE only when PB1 is TRUE and PB2 is FALSE.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-implication",
                "pattern_params": {
                    "1": "instance.PB1 = TRUE AND instance.PB2 = FALSE",
                    "2": "instance.LED = TRUE"
                },
                "entry_point": "LED_Control",
                "pattern_description": "If {instance.PB1 = TRUE AND instance.PB2 = FALSE} is true at the end of the PLC cycle, then {instance.LED = TRUE} should always be true at the end of the same cycle."
            }
        },
        {
            "property_description": "Ensure that LED is always FALSE when PB1 is FALSE.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-implication",
                "pattern_params": {
                    "1": "instance.PB1 = FALSE",
                    "2": "instance.LED = FALSE"
                },
                "entry_point": "LED_Control",
                "pattern_description": "If {instance.PB1 = FALSE} is true at the end of the PLC cycle, then {instance.LED = FALSE} should always be true at the end of the same cycle."
            }
        },
        {
            "property_description": "Ensure that LED is always FALSE when PB2 is TRUE, regardless of PB1.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-implication",
                "pattern_params": {
                    "1": "instance.PB2 = TRUE",
                    "2": "instance.LED = FALSE"
                },
                "entry_point": "LED_Control",
                "pattern_description": "If {instance.PB2 = TRUE} is true at the end of the PLC cycle, then {instance.LED = FALSE} should always be true at the end of the same cycle."
            }
        },
        {
            "property_description": "Ensure that LED is always a Boolean value.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "(instance.LED = TRUE) OR (instance.LED = FALSE)"
                },
                "entry_point": "LED_Control",
                "pattern_description": "{(instance.LED = TRUE) OR (instance.LED = FALSE)} is always true at the end of the PLC cycle."
            }
        }
    ]
}
{
    "id": "v1-E-10",
    "instruction": " Use structured text (ST code) to design a PLC program.\nThe program contains a subroutine constantprogram,\nwhich receives an integer as input and assigns the input value to variables a, b, c, d0 in sequence,\nand finally assigns the value of d0 to Output variable o.\nCall constantprogram in the main program MAIN and pass in the integer value 3.\n\nFUNCTION_BLOCK FB_SequentialAssignment\nVAR_INPUT\ni : INT;              // Input value\nEND_VAR\n\nVAR\na, b, c, d0 : INT;    // Intermediate variables\nEND_VAR\n\nVAR_OUTPUT\no : INT;              // Output value\nEND_VAR\n\nEND_FUNCTION_BLOCK ",
    "properties_to_be_validated": [
        {
            "property_description": "Ensure that the output variable 'o' always holds the value of 'd0', which is the last assigned variable in the sequence.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.o = instance.d0"
                },
                "pattern_description": "{instance.o = instance.d0} is always true at the end of the PLC cycle."
            }
        },
        {
            "property_description": "Ensure that the output variable 'o' is equal to the input variable 'i' after the complete assignment sequence.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.o = instance.i"
                },
                "pattern_description": "{instance.o = instance.i} is always true at the end of the PLC cycle."
            }
        },
        {
            "property_description": "Ensure that the intermediate variables 'a', 'b', 'c', and 'd0' correctly hold values during the sequence of assignments.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "(instance.a = instance.i) AND (instance.b = instance.a) AND (instance.c = instance.b) AND (instance.d0 = instance.c)"
                },
                "pattern_description": "{(instance.a = instance.i) AND (instance.b = instance.a) AND (instance.c = instance.b) AND (instance.d0 = instance.c)} is always true at the end of the PLC cycle."
            }
        }
    ]
}
{
    "id": "v1-E-11",
    "instruction": " This function block is designed to toggle a boolean output each time a button is pressed. It ensures that the output reflects the correct toggled state based on the input button's transition from not pressed (FALSE) to pressed (TRUE). The logic captures state changes effectively in a single PLC cycle.\n\nFUNCTION_BLOCK TOGGLE_OUTPUT\nVAR_INPUT\nButton : BOOL;\nEND_VAR\nVAR_OUTPUT\nToggledOutput : BOOL := FALSE;\nEND_VAR\nVAR\nPrevButtonState : BOOL := FALSE;\nEND_VAR\n\nEND_FUNCTION_BLOCK ",
    "properties_to_be_validated": [
        {
            "property_description": "Ensure that the output toggles when the button is pressed (rising edge).",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-statechange-betweencycles",
                "pattern_params": {
                    "0": "NOT instance.Button AND NOT instance.ToggledOutput",
                    "1": "instance.Button",
                    "2": "instance.ToggledOutput"
                },
                "entry_point": "TOGGLE_OUTPUT",
                "pattern_description": "If {NOT instance.Button AND NOT instance.ToggledOutput} is true at the end of cycle N and {instance.Button} is true at the end of cycle N+1, then {instance.ToggledOutput} is always true at the end of cycle N+1."
            }
        },
        {
            "property_description": "Ensure that the output toggles when the button is pressed (rising edge) and output was true.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-statechange-betweencycles",
                "pattern_params": {
                    "0": "NOT instance.Button AND instance.ToggledOutput",
                    "1": "instance.Button",
                    "2": "NOT instance.ToggledOutput"
                },
                "entry_point": "TOGGLE_OUTPUT",
                "pattern_description": "If {NOT instance.Button AND instance.ToggledOutput} is true at the end of cycle N and {instance.Button} is true at the end of cycle N+1, then {NOT instance.ToggledOutput} is always true at the end of cycle N+1."
            }
        },
        {
            "property_description": "Ensure that the output remains unchanged when the button is not pressed.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-statechange-betweencycles",
                "pattern_params": {
                    "0": "NOT instance.Button",
                    "1": "NOT instance.Button",
                    "2": "instance.ToggledOutput = instance.ToggledOutput"
                },
                "entry_point": "TOGGLE_OUTPUT",
                "pattern_description": "If {NOT instance.Button} is true at the end of cycle N and {NOT instance.Button} is true at the end of cycle N+1, then {instance.ToggledOutput = instance.ToggledOutput} is always true at the end of cycle N+1."
            }
        }
    ]
}
{
    "id": "v1-E-12",
    "instruction": " This function block compares two integer input values, Value1 and Value2, and outputs the larger value as MaxValue. It ensures that the output accurately reflects the maximum of the two inputs within a single PLC cycle.\n\nFUNCTION_BLOCK FIND_MAX_VALUE\nVAR_INPUT\nValue1 : INT;\nValue2 : INT;\nEND_VAR\nVAR_OUTPUT\nMaxValue : INT;\nEND_VAR\n\nEND_FUNCTION_BLOCK ",
    "properties_to_be_validated": [
        {
            "property_description": "Ensure that the output of FIND_MAX_VALUE is always equal to the greater of the two input values (Value1 and Value2).",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "(instance.MaxValue = instance.Value1 AND instance.Value1 >= instance.Value2) OR (instance.MaxValue = instance.Value2 AND instance.Value2 > instance.Value1)"
                },
                "entry_point": "FIND_MAX_VALUE",
                "pattern_description": "{(instance.MaxValue = instance.Value1 AND instance.Value1 >= instance.Value2) OR (instance.MaxValue = instance.Value2 AND instance.Value2 > instance.Value1)} is always true at the end of the PLC cycle."
            }
        },
        {
            "property_description": "Ensure that the output of FIND_MAX_VALUE is always greater than or equal to both input values.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.MaxValue >= instance.Value1 AND instance.MaxValue >= instance.Value2"
                },
                "entry_point": "FIND_MAX_VALUE",
                "pattern_description": "{instance.MaxValue >= instance.Value1 AND instance.MaxValue >= instance.Value2} is always true at the end of the PLC cycle."
            }
        }
    ]
}
{
    "id": "v1-E-13",
    "instruction": "Create a PLC function block named NOT_GATE in Structured Text (ST) that implements a boolean NOT gate. The function block should have one boolean input named 'Input' and one boolean output named 'NegatedOutput'. The output should always be the logical negation of the input.\n\nFUNCTION_BLOCK NOT_GATE\n  VAR_INPUT\n    Input : BOOL;\n  END_VAR\n  VAR_OUTPUT\n    NegatedOutput : BOOL;\n  END_VAR\nEND_FUNCTION_BLOCK",
    "properties_to_be_validated": [
        {
            "property_description": "Ensure that the output is always the logical negation of the input.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.NegatedOutput = NOT instance.Input"
                },
                "entry_point": "NOT_GATE",
                "pattern_description": "{instance.NegatedOutput = NOT instance.Input} is always true at the end of the PLC cycle."
            }
        },
        {
            "property_description": "Verify that when the input is TRUE, the output is FALSE.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-implication",
                "pattern_params": {
                    "0": "instance.Input = TRUE",
                    "1": "instance.NegatedOutput = FALSE"
                },
                "entry_point": "NOT_GATE",
                "pattern_description": "If {instance.Input = TRUE} is true at the end of the PLC cycle, then {instance.NegatedOutput = FALSE} should always be true at the end of the same cycle."
            }
        },
        {
            "property_description": "Verify that when the input is FALSE, the output is TRUE.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-implication",
                "pattern_params": {
                    "0": "instance.Input = FALSE",
                    "1": "instance.NegatedOutput = TRUE"
                },
                "entry_point": "NOT_GATE",
                "pattern_description": "If {instance.Input = FALSE} is true at the end of the PLC cycle, then {instance.NegatedOutput = TRUE} should always be true at the end of the same cycle."
            }
        }
    ]
}
{
    "id": "v1-E-14",
    "instruction": "Create a PLC function block named AND_GATE in Structured Text (ST) that implements a simple boolean AND gate. The function block should have two boolean inputs named 'Input1' and 'Input2', and one boolean output named 'AndResult'. The output should be TRUE only when both inputs are TRUE, otherwise it should be FALSE.\n\nFUNCTION_BLOCK AND_GATE\n  VAR_INPUT\n    Input1 : BOOL;\n    Input2 : BOOL;\n  END_VAR\n  VAR_OUTPUT\n    AndResult : BOOL;\n  END_VAR\n  AndResult := Input1 AND Input2;\nEND_FUNCTION_BLOCK",
    "properties_to_be_validated": [
        {
            "property_description": "Ensure that the AndResult is TRUE only when both inputs are TRUE.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.AndResult = (instance.Input1 AND instance.Input2)"
                },
                "entry_point": "AND_GATE",
                "pattern_description": "{instance.AndResult = (instance.Input1 AND instance.Input2)} is always true at the end of the PLC cycle."
            }
        },
        {
            "property_description": "Verify that the AndResult is FALSE when at least one input is FALSE.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-implication",
                "pattern_params": {
                    "0": "NOT instance.Input1 OR NOT instance.Input2",
                    "1": "NOT instance.AndResult"
                },
                "entry_point": "AND_GATE",
                "pattern_description": "If {NOT instance.Input1 OR NOT instance.Input2} is true at the end of the PLC cycle, then {NOT instance.AndResult} should always be true at the end of the same cycle."
            }
        },
        {
            "property_description": "Ensure that the AndResult is a boolean value.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.AndResult = TRUE OR instance.AndResult = FALSE"
                },
                "entry_point": "AND_GATE",
                "pattern_description": "{instance.AndResult = TRUE OR instance.AndResult = FALSE} is always true at the end of the PLC cycle."
            }
        }
    ]
}
{
    "id": "v1-E-15",
    "instruction": " Create a PLC function block named NOT_GATE in Structured Text (ST) that implements a boolean NOT gate. The function block should have one boolean input named 'Input' and one boolean output named 'NegatedOutput'. The output should always be the logical negation of the input.\n\nFUNCTION_BLOCK NOT_GATE\nVAR_INPUT\nInput : BOOL;\nEND_VAR\nVAR_OUTPUT\nNegatedOutput : BOOL;\nEND_VAR\n\nEND_FUNCTION_BLOCK ",
    "properties_to_be_validated": [
        {
            "property_description": "Ensure that the output is always the logical negation of the input.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.NegatedOutput = NOT instance.Input"
                },
                "entry_point": "NOT_GATE",
                "pattern_description": "{instance.NegatedOutput = NOT instance.Input} is always true at the end of the PLC cycle."
            }
        },
        {
            "property_description": "Verify that when the input is TRUE, the output is FALSE.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-implication",
                "pattern_params": {
                    "0": "instance.Input = TRUE",
                    "1": "instance.NegatedOutput = FALSE"
                },
                "entry_point": "NOT_GATE",
                "pattern_description": "If {instance.Input = TRUE} is true at the end of the PLC cycle, then {instance.NegatedOutput = FALSE} should always be true at the end of the same cycle."
            }
        },
        {
            "property_description": "Verify that when the input is FALSE, the output is TRUE.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-implication",
                "pattern_params": {
                    "0": "instance.Input = FALSE",
                    "1": "instance.NegatedOutput = TRUE"
                },
                "entry_point": "NOT_GATE",
                "pattern_description": "If {instance.Input = FALSE} is true at the end of the PLC cycle, then {instance.NegatedOutput = TRUE} should always be true at the end of the same cycle."
            }
        }
    ]
}
{
    "id": "v1-E-16",
    "instruction": " Create a PLC function block named AND_GATE in Structured Text (ST) that implements a simple boolean AND gate. The function block should have two boolean inputs named 'Input1' and 'Input2', and one boolean output named 'AndResult'. The output should be TRUE only when both inputs are TRUE, otherwise it should be FALSE.\n\nFUNCTION_BLOCK AND_GATE\nVAR_INPUT\nInput1 : BOOL;\nInput2 : BOOL;\nEND_VAR\nVAR_OUTPUT\nAndResult : BOOL;\nEND_VAR\nAndResult := Input1 AND Input2;\nEND_FUNCTION_BLOCK ",
    "properties_to_be_validated": [
        {
            "property_description": "Ensure that the AndResult is TRUE only when both inputs are TRUE.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.AndResult = (instance.Input1 AND instance.Input2)"
                },
                "entry_point": "AND_GATE",
                "pattern_description": "{instance.AndResult = (instance.Input1 AND instance.Input2)} is always true at the end of the PLC cycle."
            }
        },
        {
            "property_description": "Verify that the AndResult is FALSE when at least one input is FALSE.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-implication",
                "pattern_params": {
                    "0": "NOT instance.Input1 OR NOT instance.Input2",
                    "1": "NOT instance.AndResult"
                },
                "entry_point": "AND_GATE",
                "pattern_description": "If {NOT instance.Input1 OR NOT instance.Input2} is true at the end of the PLC cycle, then {NOT instance.AndResult} should always be true at the end of the same cycle."
            }
        },
        {
            "property_description": "Ensure that the AndResult is a boolean value.",
            "property": {
                "job_req": "pattern",
                "pattern_id": "pattern-invariant",
                "pattern_params": {
                    "1": "instance.AndResult = TRUE OR instance.AndResult = FALSE"
                },
                "entry_point": "AND_GATE",
                "pattern_description": "{instance.AndResult = TRUE OR instance.AndResult = FALSE} is always true at the end of the PLC cycle."
            }
        }
    ]
}
